
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String   @id @default(cuid())
  email         String   @unique
  username      String?  @unique
  passwordHash  String
  name          String?
  imageUrl      String?
  isEmailVerified Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime?

  @@index([email])
}


// here for graph 
model Kline1m {
  id           BigInt   @id @default(autoincrement())
  market       String
  bucket       DateTime 
  start        DateTime?
  open         Decimal
  high         Decimal
  low          Decimal
  close        Decimal
  volume       Decimal   // base volume
  quoteVolume  Decimal   // quote volume
  trades       Int

  @@index([market, bucket])
  @@map("klines_1m")
}

model Kline1h {
  id           BigInt   @id @default(autoincrement())
  market       String
  bucket       DateTime
  start        DateTime?
  open         Decimal
  high         Decimal
  low          Decimal
  close        Decimal
  volume       Decimal
  quoteVolume  Decimal
  trades       Int

  @@index([market, bucket])
  @@map("klines_1h")
}

model Kline1w {
  id           BigInt   @id @default(autoincrement())
  market       String
  bucket       DateTime
  start        DateTime?
  open         Decimal
  high         Decimal
  low          Decimal
  close        Decimal
  volume       Decimal
  quoteVolume  Decimal
  trades       Int

  @@index([market, bucket])
  @@map("klines_1w")
}





model Trade {
  id            String   @id
  market        String
  price         Decimal  @db.Decimal(38, 18)
  quantity      Decimal  @db.Decimal(38, 18)
  quoteQuantity Decimal  @db.Decimal(38, 18)
  isBuyerMaker  Boolean
  // message.data.timestamp is number; convert to Date in code
  timestamp     DateTime

  @@index([market, timestamp])
  @@map("trade")
}


model Order {
  // Updated via where: { id: orderId }
  id           String   @id

  // All below can be updated partially by ORDER_UPDATE
  // They are optional so that a partial update doesn't violate NOT NULL
  market       String?
  price        Decimal? @db.Decimal(38, 18)
  quantity     Decimal? @db.Decimal(38, 18)
  executedQty  Decimal? @db.Decimal(38, 18)
  side         String? // "buy" or "sell"
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  @@index([market])
  @@map("order")
}